@page "/"
@using BLL.IService
@using Models;
@inject ILogger<Home> Logger
@rendermode InteractiveServer
@inject ICarDetectorUIService _carDetectorUIService
@inject IJSRuntime JS

<PageTitle>CarCapture</PageTitle>

<div class="container" id="imageForm">
    <div class="form-group">
        <label for="imageInput" id="customeImageUpload">
            <b id="titleLabel">Upload car image</b>
            @{
                if (!string.IsNullOrEmpty(fileInputLabel))
                {
                    <b id="fileLabel">@fileInputLabel</b>
                }
            }
        </label>
        <InputFile id="imageInput" OnChange="HandleFileChange" style="display:none;"/>
    </div>
    @{
        if (!isSelected && !isLoading)
        {
            <div id="formSubmitEmpty">
                <b>Analyze <i class="fa-brands fa-searchengin"></i></b>
            </div>
        }
        else if (isSelected && !isLoading)
        {
            <button type="button" id="formSubmit" @onclick="HandleSubmit">
                <b>Analyze <i class="fa-brands fa-searchengin"></i></b>
            </button>
        }
        else
        {
            <div id="loading">
                <img src="images/Loading.gif" />
            </div>
        }
    }
</div>

<div class="container" id="imageBox">
    <img id="image" />
</div>

@{
    if(result != null)
    {
        <div class="container" id="resultTable">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Car</th>
                        <th scope="col">Color</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        foreach (var item in result.ColorList)
                        {
                            <tr>
                                <td>
                                    @item.CarScore
                                </td>
                                <td>
                                    @item.Color
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
}

@code {
    public bool isLoading { get; set; }

    public bool isSelected { get; set; }

    public string fileInputLabel { get; set; }

    public byte[] imageBytes { get; set; }

    public CarDetectorResult result { get; set; }

    private async Task HandleSubmit()
    {
        isLoading = true;
        StateHasChanged();

        // Issue https://github.com/dotnet/aspnetcore/issues/22286
        await Task.Delay(1);

        if (imageBytes != null)
        {
            result = await _carDetectorUIService.CarDetector(imageBytes);

            if(result != null)
            {
                await SetImageAsync(result.Image);
            }
        }

        isLoading = false;
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        imageBytes = ms.ToArray();

        fileInputLabel = e.File.Name;

        isSelected = true;
    }

    private async Task SetImageAsync(Stream imageStream)
    {
        var dotnetImageStream = new DotNetStreamReference(imageStream);
        await JS.InvokeVoidAsync("setImage", "image", dotnetImageStream);
    }
}
